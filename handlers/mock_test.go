// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/szabba/munch/handlers (interfaces: SubscriptionService,OnMessager)

// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	json "encoding/json"
	gomock "github.com/golang/mock/gomock"
	munch "github.com/szabba/munch"
	reflect "reflect"
)

// MockSubscriptionService is a mock of SubscriptionService interface
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockSubscriptionService) Subscribe(arg0 munch.ClientID, arg1 func(interface{})) {
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockSubscriptionServiceMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionService)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method
func (m *MockSubscriptionService) Unsubscribe(arg0 munch.ClientID) {
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockSubscriptionServiceMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriptionService)(nil).Unsubscribe), arg0)
}

// MockOnMessager is a mock of OnMessager interface
type MockOnMessager struct {
	ctrl     *gomock.Controller
	recorder *MockOnMessagerMockRecorder
}

// MockOnMessagerMockRecorder is the mock recorder for MockOnMessager
type MockOnMessagerMockRecorder struct {
	mock *MockOnMessager
}

// NewMockOnMessager creates a new mock instance
func NewMockOnMessager(ctrl *gomock.Controller) *MockOnMessager {
	mock := &MockOnMessager{ctrl: ctrl}
	mock.recorder = &MockOnMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOnMessager) EXPECT() *MockOnMessagerMockRecorder {
	return m.recorder
}

// OnMessage mocks base method
func (m *MockOnMessager) OnMessage(arg0 munch.ClientID, arg1 json.RawMessage) {
	m.ctrl.Call(m, "OnMessage", arg0, arg1)
}

// OnMessage indicates an expected call of OnMessage
func (mr *MockOnMessagerMockRecorder) OnMessage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessage", reflect.TypeOf((*MockOnMessager)(nil).OnMessage), arg0, arg1)
}
